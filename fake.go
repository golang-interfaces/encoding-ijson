// Code generated by counterfeiter. DO NOT EDIT.
package ijson

import (
	"encoding/json"
	"io"
	"sync"
)

type Fake struct {
	MarshalStub        func(v interface{}) ([]byte, error)
	marshalMutex       sync.RWMutex
	marshalArgsForCall []struct {
		v interface{}
	}
	marshalReturns struct {
		result1 []byte
		result2 error
	}
	marshalReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	NewEncoderStub        func(w io.Writer) *json.Encoder
	newEncoderMutex       sync.RWMutex
	newEncoderArgsForCall []struct {
		w io.Writer
	}
	newEncoderReturns struct {
		result1 *json.Encoder
	}
	newEncoderReturnsOnCall map[int]struct {
		result1 *json.Encoder
	}
	UnmarshalStub        func(data []byte, v interface{}) error
	unmarshalMutex       sync.RWMutex
	unmarshalArgsForCall []struct {
		data []byte
		v    interface{}
	}
	unmarshalReturns struct {
		result1 error
	}
	unmarshalReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Marshal(v interface{}) ([]byte, error) {
	fake.marshalMutex.Lock()
	ret, specificReturn := fake.marshalReturnsOnCall[len(fake.marshalArgsForCall)]
	fake.marshalArgsForCall = append(fake.marshalArgsForCall, struct {
		v interface{}
	}{v})
	fake.recordInvocation("Marshal", []interface{}{v})
	fake.marshalMutex.Unlock()
	if fake.MarshalStub != nil {
		return fake.MarshalStub(v)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.marshalReturns.result1, fake.marshalReturns.result2
}

func (fake *Fake) MarshalCallCount() int {
	fake.marshalMutex.RLock()
	defer fake.marshalMutex.RUnlock()
	return len(fake.marshalArgsForCall)
}

func (fake *Fake) MarshalArgsForCall(i int) interface{} {
	fake.marshalMutex.RLock()
	defer fake.marshalMutex.RUnlock()
	return fake.marshalArgsForCall[i].v
}

func (fake *Fake) MarshalReturns(result1 []byte, result2 error) {
	fake.MarshalStub = nil
	fake.marshalReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Fake) MarshalReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.MarshalStub = nil
	if fake.marshalReturnsOnCall == nil {
		fake.marshalReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.marshalReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Fake) NewEncoder(w io.Writer) *json.Encoder {
	fake.newEncoderMutex.Lock()
	ret, specificReturn := fake.newEncoderReturnsOnCall[len(fake.newEncoderArgsForCall)]
	fake.newEncoderArgsForCall = append(fake.newEncoderArgsForCall, struct {
		w io.Writer
	}{w})
	fake.recordInvocation("NewEncoder", []interface{}{w})
	fake.newEncoderMutex.Unlock()
	if fake.NewEncoderStub != nil {
		return fake.NewEncoderStub(w)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newEncoderReturns.result1
}

func (fake *Fake) NewEncoderCallCount() int {
	fake.newEncoderMutex.RLock()
	defer fake.newEncoderMutex.RUnlock()
	return len(fake.newEncoderArgsForCall)
}

func (fake *Fake) NewEncoderArgsForCall(i int) io.Writer {
	fake.newEncoderMutex.RLock()
	defer fake.newEncoderMutex.RUnlock()
	return fake.newEncoderArgsForCall[i].w
}

func (fake *Fake) NewEncoderReturns(result1 *json.Encoder) {
	fake.NewEncoderStub = nil
	fake.newEncoderReturns = struct {
		result1 *json.Encoder
	}{result1}
}

func (fake *Fake) NewEncoderReturnsOnCall(i int, result1 *json.Encoder) {
	fake.NewEncoderStub = nil
	if fake.newEncoderReturnsOnCall == nil {
		fake.newEncoderReturnsOnCall = make(map[int]struct {
			result1 *json.Encoder
		})
	}
	fake.newEncoderReturnsOnCall[i] = struct {
		result1 *json.Encoder
	}{result1}
}

func (fake *Fake) Unmarshal(data []byte, v interface{}) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.unmarshalMutex.Lock()
	ret, specificReturn := fake.unmarshalReturnsOnCall[len(fake.unmarshalArgsForCall)]
	fake.unmarshalArgsForCall = append(fake.unmarshalArgsForCall, struct {
		data []byte
		v    interface{}
	}{dataCopy, v})
	fake.recordInvocation("Unmarshal", []interface{}{dataCopy, v})
	fake.unmarshalMutex.Unlock()
	if fake.UnmarshalStub != nil {
		return fake.UnmarshalStub(data, v)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmarshalReturns.result1
}

func (fake *Fake) UnmarshalCallCount() int {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return len(fake.unmarshalArgsForCall)
}

func (fake *Fake) UnmarshalArgsForCall(i int) ([]byte, interface{}) {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return fake.unmarshalArgsForCall[i].data, fake.unmarshalArgsForCall[i].v
}

func (fake *Fake) UnmarshalReturns(result1 error) {
	fake.UnmarshalStub = nil
	fake.unmarshalReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) UnmarshalReturnsOnCall(i int, result1 error) {
	fake.UnmarshalStub = nil
	if fake.unmarshalReturnsOnCall == nil {
		fake.unmarshalReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmarshalReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.marshalMutex.RLock()
	defer fake.marshalMutex.RUnlock()
	fake.newEncoderMutex.RLock()
	defer fake.newEncoderMutex.RUnlock()
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IJSON = new(Fake)
